@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable;



<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if(IsConnected)
{
    <div class="container">
        <div class="my-3 pb-4 border-bottom border-secondary">
            <input @bind="username" type="text" placeholder="Adınızı Giriniz ?" />
            <input @bind="message" type="text" @onkeyup="HandleInput" placeholder="Mesajınız..." />


            <textarea @bind="messages" style="width:100%; height:500px;">
                @messages
                </textarea>

            <button class="btn btn-primary" @onclick="sendMessage">Send</button>
        </div>
    </div>
}






<SurveyPrompt Title="How is Blazor working for you?" />


@code
{
    HubConnection hubConnection;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    private string message = string.Empty;
    private string username = string.Empty;
    private string messages = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Connect();
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages += encodedMsg + "\n";
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    public async Task sendMessage()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", username, message);
            message = string.Empty;
        }
    }

    public async Task HandleInput(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await sendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}